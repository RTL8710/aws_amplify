type Device {
  id: ID!
  deviceID: String
  devicetype: String
  Users(filter: ModelDeviceUserFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelDeviceUserConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type User {
  id: ID!
  userID: String
  devices(filter: ModelDeviceUserFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelDeviceUserConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type Todo {
  id: ID!
  name: String!
  description: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type DeviceUser {
  id: ID!
  deviceId: ID!
  userId: ID!
  device: Device!
  user: User!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelDeviceConnection {
  items: [Device]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelDeviceFilterInput {
  id: ModelIDInput
  deviceID: ModelStringInput
  devicetype: ModelStringInput
  and: [ModelDeviceFilterInput]
  or: [ModelDeviceFilterInput]
  not: ModelDeviceFilterInput
  _deleted: ModelBooleanInput
}

type Query {
  getDevice(id: ID!): Device
  listDevices(filter: ModelDeviceFilterInput, limit: Int, nextToken: String): ModelDeviceConnection
  syncDevices(filter: ModelDeviceFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelDeviceConnection
  getUser(id: ID!): User
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection
  syncUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelUserConnection
  getTodo(id: ID!): Todo
  listTodos(filter: ModelTodoFilterInput, limit: Int, nextToken: String): ModelTodoConnection
  syncTodos(filter: ModelTodoFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelTodoConnection
  getDeviceUser(id: ID!): DeviceUser
  listDeviceUsers(filter: ModelDeviceUserFilterInput, limit: Int, nextToken: String): ModelDeviceUserConnection
  syncDeviceUsers(filter: ModelDeviceUserFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelDeviceUserConnection
  deviceUsersByDeviceId(deviceId: ID!, sortDirection: ModelSortDirection, filter: ModelDeviceUserFilterInput, limit: Int, nextToken: String): ModelDeviceUserConnection
  deviceUsersByUserId(userId: ID!, sortDirection: ModelSortDirection, filter: ModelDeviceUserFilterInput, limit: Int, nextToken: String): ModelDeviceUserConnection
}

input ModelDeviceConditionInput {
  deviceID: ModelStringInput
  devicetype: ModelStringInput
  and: [ModelDeviceConditionInput]
  or: [ModelDeviceConditionInput]
  not: ModelDeviceConditionInput
  _deleted: ModelBooleanInput
}

input CreateDeviceInput {
  id: ID
  deviceID: String
  devicetype: String
  _version: Int
}

input UpdateDeviceInput {
  id: ID!
  deviceID: String
  devicetype: String
  _version: Int
}

input DeleteDeviceInput {
  id: ID!
  _version: Int
}

type Mutation {
  createDevice(input: CreateDeviceInput!, condition: ModelDeviceConditionInput): Device
  updateDevice(input: UpdateDeviceInput!, condition: ModelDeviceConditionInput): Device
  deleteDevice(input: DeleteDeviceInput!, condition: ModelDeviceConditionInput): Device
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User
  createTodo(input: CreateTodoInput!, condition: ModelTodoConditionInput): Todo
  updateTodo(input: UpdateTodoInput!, condition: ModelTodoConditionInput): Todo
  deleteTodo(input: DeleteTodoInput!, condition: ModelTodoConditionInput): Todo
  createDeviceUser(input: CreateDeviceUserInput!, condition: ModelDeviceUserConditionInput): DeviceUser
  updateDeviceUser(input: UpdateDeviceUserInput!, condition: ModelDeviceUserConditionInput): DeviceUser
  deleteDeviceUser(input: DeleteDeviceUserInput!, condition: ModelDeviceUserConditionInput): DeviceUser
}

input ModelSubscriptionDeviceFilterInput {
  id: ModelSubscriptionIDInput
  deviceID: ModelSubscriptionStringInput
  devicetype: ModelSubscriptionStringInput
  and: [ModelSubscriptionDeviceFilterInput]
  or: [ModelSubscriptionDeviceFilterInput]
  _deleted: ModelBooleanInput
}

type Subscription {
  onCreateDevice(filter: ModelSubscriptionDeviceFilterInput): Device @aws_subscribe(mutations: ["createDevice"])
  onUpdateDevice(filter: ModelSubscriptionDeviceFilterInput): Device @aws_subscribe(mutations: ["updateDevice"])
  onDeleteDevice(filter: ModelSubscriptionDeviceFilterInput): Device @aws_subscribe(mutations: ["deleteDevice"])
  onCreateUser(filter: ModelSubscriptionUserFilterInput): User @aws_subscribe(mutations: ["createUser"])
  onUpdateUser(filter: ModelSubscriptionUserFilterInput): User @aws_subscribe(mutations: ["updateUser"])
  onDeleteUser(filter: ModelSubscriptionUserFilterInput): User @aws_subscribe(mutations: ["deleteUser"])
  onCreateTodo(filter: ModelSubscriptionTodoFilterInput): Todo @aws_subscribe(mutations: ["createTodo"])
  onUpdateTodo(filter: ModelSubscriptionTodoFilterInput): Todo @aws_subscribe(mutations: ["updateTodo"])
  onDeleteTodo(filter: ModelSubscriptionTodoFilterInput): Todo @aws_subscribe(mutations: ["deleteTodo"])
  onCreateDeviceUser(filter: ModelSubscriptionDeviceUserFilterInput): DeviceUser @aws_subscribe(mutations: ["createDeviceUser"])
  onUpdateDeviceUser(filter: ModelSubscriptionDeviceUserFilterInput): DeviceUser @aws_subscribe(mutations: ["updateDeviceUser"])
  onDeleteDeviceUser(filter: ModelSubscriptionDeviceUserFilterInput): DeviceUser @aws_subscribe(mutations: ["deleteDeviceUser"])
}

type ModelUserConnection {
  items: [User]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelUserFilterInput {
  id: ModelIDInput
  userID: ModelStringInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
  _deleted: ModelBooleanInput
}

input ModelUserConditionInput {
  userID: ModelStringInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
  _deleted: ModelBooleanInput
}

input CreateUserInput {
  id: ID
  userID: String
  _version: Int
}

input UpdateUserInput {
  id: ID!
  userID: String
  _version: Int
}

input DeleteUserInput {
  id: ID!
  _version: Int
}

input ModelSubscriptionUserFilterInput {
  id: ModelSubscriptionIDInput
  userID: ModelSubscriptionStringInput
  and: [ModelSubscriptionUserFilterInput]
  or: [ModelSubscriptionUserFilterInput]
  _deleted: ModelBooleanInput
}

type ModelTodoConnection {
  items: [Todo]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelTodoFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  description: ModelStringInput
  and: [ModelTodoFilterInput]
  or: [ModelTodoFilterInput]
  not: ModelTodoFilterInput
  _deleted: ModelBooleanInput
}

input ModelTodoConditionInput {
  name: ModelStringInput
  description: ModelStringInput
  and: [ModelTodoConditionInput]
  or: [ModelTodoConditionInput]
  not: ModelTodoConditionInput
  _deleted: ModelBooleanInput
}

input CreateTodoInput {
  id: ID
  name: String!
  description: String
  _version: Int
}

input UpdateTodoInput {
  id: ID!
  name: String
  description: String
  _version: Int
}

input DeleteTodoInput {
  id: ID!
  _version: Int
}

input ModelSubscriptionTodoFilterInput {
  id: ModelSubscriptionIDInput
  name: ModelSubscriptionStringInput
  description: ModelSubscriptionStringInput
  and: [ModelSubscriptionTodoFilterInput]
  or: [ModelSubscriptionTodoFilterInput]
  _deleted: ModelBooleanInput
}

type ModelDeviceUserConnection {
  items: [DeviceUser]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelDeviceUserFilterInput {
  id: ModelIDInput
  deviceId: ModelIDInput
  userId: ModelIDInput
  and: [ModelDeviceUserFilterInput]
  or: [ModelDeviceUserFilterInput]
  not: ModelDeviceUserFilterInput
  _deleted: ModelBooleanInput
}

input ModelDeviceUserConditionInput {
  deviceId: ModelIDInput
  userId: ModelIDInput
  and: [ModelDeviceUserConditionInput]
  or: [ModelDeviceUserConditionInput]
  not: ModelDeviceUserConditionInput
  _deleted: ModelBooleanInput
}

input CreateDeviceUserInput {
  id: ID
  deviceId: ID!
  userId: ID!
  _version: Int
}

input UpdateDeviceUserInput {
  id: ID!
  deviceId: ID
  userId: ID
  _version: Int
}

input DeleteDeviceUserInput {
  id: ID!
  _version: Int
}

input ModelSubscriptionDeviceUserFilterInput {
  id: ModelSubscriptionIDInput
  deviceId: ModelSubscriptionIDInput
  userId: ModelSubscriptionIDInput
  and: [ModelSubscriptionDeviceUserFilterInput]
  or: [ModelSubscriptionDeviceUserFilterInput]
  _deleted: ModelBooleanInput
}
